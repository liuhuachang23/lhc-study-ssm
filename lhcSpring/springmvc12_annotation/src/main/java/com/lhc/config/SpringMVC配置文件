<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 1.自动扫描包 -->
    <context:component-scan base-package="com.lhc"/>

    <!-- 2.配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <!-- 配置模板引擎 -->
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <!-- 配置模板解析器 -->
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">

                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>

                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!-- 3.开放对静态资源的访问-->
    <!--<mvc:default-servlet-handler />-->

    <!-- 4.设置开启mvc注解驱动 -->
    <mvc:annotation-driven />

    <!-- 5.视图控制器：为当前请求直接设置视图名称实现页面跳转
	        path：设置处理的请求地址
	        view-name：设置请求地址所对应的视图名称
    -->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

    <!-- 6.文件上传解析器
        必须通过文件解析器的解析才能将文件转换为MultipartFile对象
        SpringMVC在获取这个bean的时候，是通过id来获取的，所有必须将id设置为multipartResolver
    -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    </bean>

    <!-- 7.拦截器-->
    <mvc:interceptors>

        <!--FirstInterceptor拦截器-->
        <mvc:interceptor>
            <!--配置需要拦截的请求的请求路径，/**表示拦截所有请求 -->
            <mvc:mapping path="/**" />
            <!--设置需要拦截的请求-->
            <mvc:exclude-mapping path="/testRequestEntity"/>
            <!--设置需要排除的请求，即不需要拦截的请求-->
            <ref bean="firstInterceptor"></ref>
        </mvc:interceptor>

        <!--SecondInterceptor拦截器-->
        <ref bean="secondInterceptor"></ref>

    </mvc:interceptors>


    <!-- 8.异常解析器

    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">

        &lt;!&ndash;1. exceptionMappings异常映射，用于页面跳转 &ndash;&gt;
        <property name="exceptionMappings">
            &lt;!&ndash;properties&ndash;&gt;
            <props>
                &lt;!&ndash; key：处理器方法执行过程中出现的异常
                     value：若出现指定异常时，设置一个新的视图名称，跳转到指定页面&ndash;&gt;
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>

        &lt;!&ndash;2. exceptionAttribute 用于共享数据，将出现的异常信息在请求域中进行共享
                value="ex"：设置ex为请求域中异常信息的属性名
        &ndash;&gt;
        <property name="exceptionAttribute" value="ex"></property>

    </bean>-->



</beans>