<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">

    <bean id="studentOne" class="com.lhc.spring.pojo.Student"></bean>

    <bean id="studentTwo" class="com.lhc.spring.pojo.Student">
        <!--
            property标签：通过组件类的setXxx()方法给组件对象设置属性
    	        name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关）
    	        value属性：指定属性值
	    -->
        <property name="sid" value="1001"></property>
        <property name="sname" value="张三"></property>
        <property name="age" value="18"></property>
        <property name="gender" value="男"></property>
    </bean>

    <bean id="studentThree" class="com.lhc.spring.pojo.Student">
        <!-- 使用有参构造器注入： 属性赋值的书写顺序 要和 实体类有参构造器内参数的顺序一致，
        顺序不一致 可能导致 赋值错位，或者 报错（类型不匹配）
        -->
        <constructor-arg value="1002"></constructor-arg>
        <constructor-arg value="李四"></constructor-arg>
        <constructor-arg value="33"></constructor-arg>
        <constructor-arg value="女"></constructor-arg>
    </bean>

    <bean id="studentFour" class="com.lhc.spring.pojo.Student">
        <property name="sid" value="1004"></property>
        <property name="sname" value="赵六"></property>
        <property name="age" value="26"></property>
        <property name="gender" value="女"></property>
        <!--方式1： 引用外部已声明的bean-->
        <!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 -->
        <!--<property name="clazz" ref="clazzOne"></property>-->

        <!--方式2：级联的方式-->
        <!-- 一定先引用某个bean为属性赋值，才可以使用级联方式更新属性 -->
        <!--<property name="clazz" ref="clazzOne"></property>
        <property name="clazz.clazzId" value="3333"></property>
        <property name="clazz.clazzName" value="最强王者班"></property>-->

        <!--方式3：内部bean-->
        <property name="clazz">
            <!-- 在一个bean中再声明一个bean就是内部bean -->
            <!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 -->
            <bean id="clazzInner" class="com.lhc.spring.pojo.Clazz">
                <property name="clazzId" value="2222"></property>
                <property name="clazzName" value="士兵突击班"></property>
            </bean>
        </property>
    </bean>

    <bean id="studentFive" class="com.lhc.spring.pojo.Student">
        <property name="sid" value="1005"></property>
        <property name="sname" value="赵六"></property>
        <property name="age" value="26"></property>
        <property name="gender" value="女"></property>
        <!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 -->
        <property name="clazz" ref="clazzOne"></property>
        <!--为数组属性赋值-->
        <property name="hobbies">
            <array>
                <!--value：为字面量类型的属性赋值，ref：为类类型的属性赋值 -->
                <value>抽烟</value>
                <value>喝酒</value>
                <value>烫头</value>
            </array>
        </property>
        <!--为Map属性赋值 -->
        <!--方式一：在map标签内赋值-->
        <!--<property name="teacherMap">
            <map>
                <entry>
                    <key>
                        <value>10010</value>
                    </key>
                    <ref bean="teacherOne"></ref>
                </entry>
                <entry>
                    <key>
                        <value>10086</value>
                    </key>
                    <ref bean="teacherTwo"></ref>
                </entry>
            </map>
        </property>-->
        <!--方式二：引用map集合类型的bean-->
        <property name="teacherMap" ref="teacherMap"></property>
    </bean>

    <bean id="clazzOne" class="com.lhc.spring.pojo.Clazz">
        <property name="clazzId" value="4444"></property>
        <property name="clazzName" value="Javaee0222"></property>
    </bean>

    <bean id="clazzTwo" class="com.lhc.spring.pojo.Clazz">
        <property name="clazzId" value="4444"></property>
        <property name="clazzName" value="Javaee0222"></property>
        <!--方式一：在list标签内赋值-->
        <!--为list集合类型属性赋值（如果为set，直接将标签改为set即可）-->
        <!--<property name="students">
            <list>
                &lt;!&ndash;value：为字面量类型的属性赋值，ref：为类类型的属性赋值 &ndash;&gt;
                <ref bean="studentOne"></ref>
                <ref bean="studentTwo"></ref>
                <ref bean="studentThree"></ref>
            </list>
        </property>-->

        <!--方式二：引用list集合类型的bean-->
        <property name="students" ref="studentList"></property>
    </bean>

    <!-- 配置一个list集合类型的bean，需要使用util的约束 -->
    <util:list id="studentList">
        <!--value：为字面量类型的属性赋值，ref：为类类型的属性赋值 -->
        <ref bean="studentOne"></ref>
        <ref bean="studentTwo"></ref>
        <ref bean="studentThree"></ref>
    </util:list>

    <!--配置一个map集合类型的bean，需要使用util的约束-->
    <util:map id="teacherMap">
        <entry>
            <key>
                <value>10010</value>
            </key>
            <ref bean="teacherOne"></ref>
        </entry>
        <entry>
            <key>
                <value>10086</value>
            </key>
            <ref bean="teacherTwo"></ref>
        </entry>
    </util:map>

    <bean id="teacherOne" class="com.lhc.spring.pojo.Teacher">
        <property name="teacherId" value="10010"></property>
        <property name="teacherName" value="大宝"></property>
    </bean>

    <bean id="teacherTwo" class="com.lhc.spring.pojo.Teacher">
        <property name="teacherId" value="10086"></property>
        <property name="teacherName" value="二宝"></property>
    </bean>

    <!--使用p命名空间，给属性赋值-->
    <bean id="studentSex" class="com.lhc.spring.pojo.Student"
          p:sid="1005" p:sname="小明" p:clazz-ref="clazzOne" p:teacherMap-ref="teacherMap">
    </bean>



</beans>